	Token Name: FLOAT 	Token: float 	 Lineno: 1
	Token Name: NAME 	Token: g 	 Lineno: 1
	Token Name: META CHAR 	Token: ; 	 Lineno: 1
	Token Name: FLOAT 	Token: float 	 Lineno: 3
	Token Name: NAME 	Token: g 	 Lineno: 3
	Token Name: META CHAR 	Token: ( 	 Lineno: 3
	Token Name: INTEGER 	Token: int 	 Lineno: 3
	Token Name: NAME 	Token: x 	 Lineno: 3
	Token Name: META CHAR 	Token: , 	 Lineno: 3
	Token Name: INTEGER 	Token: int 	 Lineno: 3
	Token Name: NAME 	Token: y 	 Lineno: 3
	Token Name: META CHAR 	Token: ) 	 Lineno: 3
	Token Name: META CHAR 	Token: { 	 Lineno: 3
	Token Name: INTEGER 	Token: int 	 Lineno: 4
	Token Name: NAME 	Token: u 	 Lineno: 4
	Token Name: META CHAR 	Token: ; 	 Lineno: 4
	Token Name: RETURN 	Token: return 	 Lineno: 5
	Token Name: FNUM 	Token: 1.1 	 Lineno: 5
	Token Name: META CHAR 	Token: ; 	 Lineno: 5
	Token Name: META CHAR 	Token: } 	 Lineno: 6
	Token Name: VOID 	Token: void 	 Lineno: 8
	Token Name: NAME 	Token: main 	 Lineno: 8
	Token Name: META CHAR 	Token: ( 	 Lineno: 8
	Token Name: META CHAR 	Token: ) 	 Lineno: 8
	Token Name: META CHAR 	Token: { 	 Lineno: 9
	Token Name: NAME 	Token: g 	 Lineno: 10
	Token Name: META CHAR 	Token: ( 	 Lineno: 10
	Token Name: NUM 	Token: 2 	 Lineno: 10
	Token Name: META CHAR 	Token: , 	 Lineno: 10
	Token Name: NUM 	Token: 3 	 Lineno: 10
	Token Name: META CHAR 	Token: ) 	 Lineno: 10
	Token Name: META CHAR 	Token: ; 	 Lineno: 10
	Token Name: RETURN 	Token: return 	 Lineno: 11
	Token Name: META CHAR 	Token: ; 	 Lineno: 11
	Token Name: META CHAR 	Token: } 	 Lineno: 12
Program:
   Procedure: g_, Return Type: FLOAT
	x_  Type:INT
	y_  Type:INT

         RETURN Num : 1.10
   Procedure: main, Return Type: VOID

         FN CALL: g_(
            Num : 2
            Num : 3)
         RETURN <NOTHING>
Program:

Global Declarations:
   Name: g_Type : Double Entity Type: VAR (No offset assigned yet)
   Procedure: g_, Return Type:FLOAT
   Local Declarartions
   Name: u_ Type: INT Entity Type: VAR (No offset assigned yet)
   Procedure: main, Return Type:VOID
   Local Declarartions
  Procedure: g_
  Intermediate Code Statements
	iLoad.d:    	f2 <- 1.10
	move.d:    	f0 <- f2
	return
  Procedure: main
  Intermediate Code Statements
	iLoad:    	v0 <- 3
	store:    	y_ <- v0
	iLoad:    	v0 <- 2
	store:    	x_ <- v0
	call g_
	move.d:    	f2 <- f0
	return

	.data
g_:	.double 0.0

	.text 			# The .text assembler directive indicates
	.globl g_		# The following is the code (as oppose to data)
g_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 12		# Make space for the locals
# Prologue ends

	li.d $f2, 1.10
	mov.d $f0, $f2
	j epilogue_g_

# Epilogue Begins
epilogue_g_:
	add $sp, $sp, 12
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	li $v0, 3
	sw $v0, 0($sp)
	li $v0, 2
	sw $v0, -4($sp)
	sub $sp, $sp, 8
	jal g_
	add $sp, $sp, 8
	mov.d $f2, $f0
	j epilogue_main

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends

Program:

Global Declarations:
   Name: g_Type : Double Entity Type: VAR Start Offset: 0 End Offset: 8
   Procedure: g_, Return Type:FLOAT
   Local Declarartions
   Name: u_ Type: INT Entity Type: VAR Start Offset: 0 End Offset: 4
   Procedure: main, Return Type:VOID
   Local Declarartions
